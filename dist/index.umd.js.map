{"version":3,"file":"index.umd.js","sources":["../host.ts","../getDevice.ts","../addStatus.ts"],"sourcesContent":["export const HOST =\n  process.env.MOTO_GRAPHQL_HOST || `http://localhost:5000/graphql`;\n","import { HOST } from \"./host\";\nimport { IDevice } from \"./IDevice\";\n\nconst { request } = require(\"graphql-request\");\nexport function getDevice(imei: string): Promise<IDevice> {\n  return request(\n    HOST,\n    `{\n  device: deviceByImei(imei: \"352312090142897\") {\n    id\n    companyId\n    groupId\n    imei\n    skipAcc\n    type\n    status: status2SByDeviceId(first: 1, orderBy: CREATED_AT_DESC) {\n      nodes {\n        deviceId\n        state\n        distance\n        createdAt\n        electricity\n        gpsOn\n        chargeOn\n        accHigh\n        powerLevel\n        gsmLevel\n        time\n        lat\n        lng\n        speed\n        rotation\n      }\n    }\n  }\n}\n`\n  ).then(res => ({ ...res.device, status: res.device.status.nodes[0] }));\n}\n","import { HOST } from \"./host\";\nimport { IStatus } from \"./IStatus\";\n\nconst { request } = require(\"graphql-request\");\nexport function addStatus(status: IStatus): Promise<IStatus> {\n  return request(\n    HOST,\n    `mutation ($status: CreateStatus2Input!) {\n  status: createStatus2(input: $status) {\n    status2 {\n      deviceId\n      state\n      distance\n      createdAt\n      electricity\n      gpsOn\n      chargeOn\n      accHigh\n      powerLevel\n      gsmLevel\n      time\n      lat\n      lng\n      speed\n      rotation\n    }\n  }\n}\n`,\n    {\n      status: {\n        status2: status\n      }\n    }\n  ).then(res => res.status.status2 as IStatus);\n}\n"],"names":["HOST","process","env","MOTO_GRAPHQL_HOST","request","require","imei","status"],"mappings":"6KAAO,MAAMA,EACXC,QAAQC,IAAIC,mBAAqB,iCCE7BC,QAAEA,GAAYC,QAAQ,mBCA5B,cAAQD,GAAYC,QAAQ,wCDCFC,GACxB,OAAOF,EACLJ,EACA,ujBCHsBO,GACxB,OAAOH,EACLJ,EACA"}